// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package source

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ConfigAuthPassword     = "auth.password"
	ConfigAuthRealm        = "auth.realm"
	ConfigAuthUsername     = "auth.username"
	ConfigBatchSize        = "batchSize"
	ConfigDatabase         = "database"
	ConfigEntityLabels     = "entityLabels"
	ConfigEntityType       = "entityType"
	ConfigKeyProperties    = "keyProperties"
	ConfigOrderingProperty = "orderingProperty"
	ConfigSnapshot         = "snapshot"
	ConfigUri              = "uri"
)

func (Config) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ConfigAuthPassword: {
			Default:     "",
			Description: "The password to use when performing basic auth.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigAuthRealm: {
			Default:     "",
			Description: "The realm to use when performing basic auth.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigAuthUsername: {
			Default:     "",
			Description: "The username to use when performing basic auth.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigBatchSize: {
			Default:     "1000",
			Description: "The size of an element batch.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{
				config.ValidationGreaterThan{V: 0},
				config.ValidationLessThan{V: 100001},
			},
		},
		ConfigDatabase: {
			Default:     "neo4j",
			Description: "The name of a database the connector should work with.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigEntityLabels: {
			Default:     "",
			Description: "Holds a list of labels belonging to an entity.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigEntityType: {
			Default:     "",
			Description: "Defines an entity type the connector should work with.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
				config.ValidationInclusion{List: []string{"node", "relationship"}},
			},
		},
		ConfigKeyProperties: {
			Default:     "",
			Description: "The list of property names that are used for constructing a record key.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigOrderingProperty: {
			Default:     "",
			Description: "The name of a property that is used for ordering\nnodes or relationships when capturing a snapshot.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigSnapshot: {
			Default:     "true",
			Description: "Determines whether or not the connector will take a snapshot\nof all nodes or relationships before starting polling mode.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		ConfigUri: {
			Default:     "",
			Description: "The connection URI pointed to a Neo4j instance.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
